@using Sandbox;
@using Sandbox.UI;
@using System;

@inherits Panel
@namespace EmojiEngine

<style>
	EmojiDisplay {
        width:100%;
		height:100%;
		pointer-events: none;
		z-index: 0;
		position: absolute;

		.emoji {
			position: absolute;
			color: white;
			font-family: W10Emoji;
			text-align: center;
			align-items: center;
			//border: 1px solid grey;
		}

		.line {
			position: absolute;
			transform-origin: 0% 50%;
		}
    }
</style>

<root style="
	background: linear-gradient(@(90f + Utils.FastSin(Hud.Instance.ElapsedTime * 0.1f) * 10f)deg, @(Hud.Instance.BgColorBottom.Rgba), @(Hud.Instance.BgColorTop.Rgba));
">
	@foreach(var emoji in Hud.Instance.Emojis)
	{
		@if (!emoji.IsVisible || (string.IsNullOrEmpty(emoji.Text) && string.IsNullOrEmpty(emoji.BackgroundImage)))
			continue;

		<EmojiPanel Emoji=@emoji></EmojiPanel>
	}

	@foreach(var line in Hud.Instance.Lines)
	{
		var a = new Vector2(line.posA.x, (Screen.Height * ScaleFromScreen) - line.posA.y);
		var b = new Vector2(line.posB.x, (Screen.Height * ScaleFromScreen) - line.posB.y);
		var length = (b - a).Length;
		var angle = MathF.Atan2(b.y - a.y, b.x - a.x) * 180f / Math.PI;
		var opacity = line.lifetime > 0f ? Utils.Map(Hud.Instance.ElapsedTime, line.spawnTime, line.spawnTime + line.lifetime, 1f, 0f) : 1f;

		<panel class="line" style="
			background-color: @(line.color.Rgba);
			left: @(a.x)px;
			top: @(a.y)px;
			width: @(length)px;
			height: @(line.thickness)px;
			transform: rotate(@(angle)deg);
			opacity: @(opacity);
			z-index: @(line.zIndex);
			backdrop-filter: invert(@line.invert);
			backdrop-filter: saturate(@line.saturation);
			backdrop-filter: blur(@line.blur);
		"> </panel>
	}
</root>

@code {
	public float Scale { get; set; } = 1f;

	public override void Tick()
	{
		base.Tick();

		//var transform = new PanelTransform();
		//transform.AddScale(Scale);
		//Style.Transform = transform;
	}

	protected override int BuildHash()
	{
		return HashCode.Combine(Hud.Instance.ElapsedTime); // todo
	}
}
