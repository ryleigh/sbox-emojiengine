@using Sandbox;
@using Sandbox.UI;
@using System;

@inherits Panel
@namespace EmojiEngine

<style>
	EmojiPanel {
        position: absolute;
		color: white;
		font-family: W10Emoji;
		text-align: center;
		align-items: center;
		justify-content: center;
		background-repeat: no-repeat;
		background-size: cover;
		.debug_text {
			font-size: 18px;
			position: absolute;
			text-stroke: 8px black;
		}
    }
</style>

<root style="
		left: @(Emoji.Position.x - Emoji.PanelSize * 0.5f + Emoji.SpriteOffset.x - Hud.Instance.CameraOffset.x)px;
		bottom: @(Emoji.Position.y - Emoji.PanelSize * 0.5f + Emoji.SpriteOffset.y - Hud.Instance.CameraOffset.y)px;
		font-size: @(Emoji.FontSize)px;
		opacity: @(Emoji.Opacity);
		z-index: @(Emoji.ZIndex);
		transform: rotate(@(Emoji.Degrees)deg) scale(@(Emoji.Scale * Hud.Instance.CameraScale)) scaleY(@(Emoji.ScaleY)) scaleX(@(Emoji.ScaleX * (Emoji.FlipX ? -1f : 1f)));
		transform-origin: @(Emoji.TransformOriginX * 100)% @(Emoji.TransformOriginY * 100)%;
		width: @(Emoji.PanelSize)px;
		height: @(Emoji.PanelSize)px;
		text-stroke: @(Emoji.TextStroke)px @Emoji.TextStrokeColor.Rgba;
		text-shadow: @(Emoji.TextShadowX)px @(-Emoji.TextShadowY)px @(Emoji.TextShadowBlur)px @Emoji.TextShadowColor.Rgba;
		filter: blur(@(Emoji.Blur)px);
		filter: brightness(@Emoji.Brightness);
		filter: contrast(@Emoji.Contrast);
		filter: invert(@Emoji.Invert);
		filter: saturate(@Emoji.Saturation);
		filter: sepia(@Emoji.Sepia);
		filter: hue-rotate(@Emoji.HueRotateDegrees);
		@(!string.IsNullOrEmpty(Emoji.BackgroundImage) ? $"background-image: url('{@Emoji.BackgroundImage}');" : "")
	">

	@(Emoji.Text)

	@if(!string.IsNullOrEmpty(Emoji.DebugText))
	{
		<label class="debug_text" style="
			transform: rotate(@(-Emoji.Degrees)deg); 
		">
			@(Emoji.DebugText)
		</label>
	}

	<!-- TEXT SHADOW ? -->

	<!-- <panel class="emoji" style="
		text-shadow: @Emoji.TextShadowX @Emoji.TextShadowY @Emoji.TextShadowBlur @Emoji.TextShadowColor.Rgba
	">
		😘
	</panel> -->

	<!-- <panel class="emoji" style="
		filter: border-wrap(1px white);
		onclick="@(e => OnClick(e))"
	>
		😘
	</panel> -->

</root>

@code {
	public Emoji Emoji { get; set; }

	protected override int BuildHash()
	{
		return HashCode.Combine(Hud.Instance.CurrentTime);
	}

	//string GetClockIcon()
	//{
	//	TimeSpan t = TimeSpan.FromSeconds(Hud.Instance.ElapsedTime);
	//	int ticks = (int)t.Milliseconds;
	//	int interval = 83;

	//	if(ticks < interval * 1)		return "🕛";
	//	else if(ticks < interval * 2)	return "🕐";
	//	else if(ticks < interval * 3)	return "🕑";
	//	else if(ticks < interval * 4)	return "🕒";
	//	else if(ticks < interval * 5)	return "🕓";
	//	else if(ticks < interval * 6)	return "🕔";
	//	else if(ticks < interval * 7)	return "🕕";
	//	else if(ticks < interval * 8)	return "🕖";
	//	else if(ticks < interval * 9)	return "🕗";
	//	else if(ticks < interval * 10)	return "🕘";
	//	else if(ticks < interval * 11)	return "🕙";
	//	else							return "🕚";
	//}
}
